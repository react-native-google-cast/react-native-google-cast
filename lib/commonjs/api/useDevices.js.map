{"version":3,"sources":["useDevices.ts"],"names":["useDevices","discoveryManager","CastContext","getDiscoveryManager","devices","setDevices","getDevices","then","listener","onDevicesUpdated","remove"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEA;AACA;AACA;AACe,SAASA,UAAT,GAAgC;AAC7C,QAAMC,gBAAgB,GAAGC,qBAAYC,mBAAZ,EAAzB;;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAAmB,EAAnB,CAA9B;AAEA,wBAAU,MAAM;AACdJ,IAAAA,gBAAgB,CAACK,UAAjB,GAA8BC,IAA9B,CAAmCF,UAAnC;AAEA,UAAMG,QAAQ,GAAGP,gBAAgB,CAACQ,gBAAjB,CAAkCJ,UAAlC,CAAjB;AAEA,WAAO,MAAM;AACXG,MAAAA,QAAQ,CAACE,MAAT;AACD,KAFD;AAGD,GARD,EAQG,CAACT,gBAAD,CARH;AAUA,SAAOG,OAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\nimport Device from '../types/Device'\nimport CastContext from './CastContext'\n\n/**\n * Hook that listens to changes to available devices and returns current list.\n */\nexport default function useDevices(): Device[] {\n  const discoveryManager = CastContext.getDiscoveryManager()\n\n  const [devices, setDevices] = useState<Device[]>([])\n\n  useEffect(() => {\n    discoveryManager.getDevices().then(setDevices)\n\n    const listener = discoveryManager.onDevicesUpdated(setDevices)\n\n    return () => {\n      listener.remove()\n    }\n  }, [discoveryManager])\n\n  return devices\n}\n"]}