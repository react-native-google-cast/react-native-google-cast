{"version":3,"sources":["CastChannel.ts"],"names":["RNGCCastSession","Native","NativeModules","EventEmitter","NativeEventEmitter","CastChannel","constructor","castSession","namespace","onMessage","add","addChannel","listener","offMessage","messageListener","addListener","CHANNEL_MESSAGE_RECEIVED","message","remove","undefined","removeChannel","sendMessage","JSON","stringify"],"mappings":";;;;;;;AAAA;;;;AAOA,MAAM;AAAEA,EAAAA,eAAe,EAAEC;AAAnB,IAA8BC,0BAApC;AACA,MAAMC,YAAY,GAAG,IAAIC,+BAAJ,CAAuBH,MAAvB,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,MAAMI,WAAN,CAAkB;AAI/B;AAGQC,EAAAA,WAAR,CACEC,WADF,EAEEC,SAFF,EAGEC,SAHF,EAIE;AAAA;;AAAA;;AAAA;;AACA,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;;AAEA,QAAIC,SAAJ,EAAe;AACb,WAAKA,SAAL,CAAeA,SAAf;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,eAAoBC,GAApB,CACEH,WADF,EAEEC,SAFF,EAGEC,SAHF,EAIwB;AACtB,UAAMR,MAAM,CAACU,UAAP,CAAkBH,SAAlB,CAAN;AAEA,WAAO,IAAIH,WAAJ,CAAgBE,WAAhB,EAA6BC,SAA7B,EAAwCC,SAAxC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEA,EAAAA,SAAS,CAACG,QAAD,EAA4D;AACnE,SAAKC,UAAL;AACA,SAAKC,eAAL,GAAuBX,YAAY,CAACY,WAAb,CACrBd,MAAM,CAACe,wBADc,EAErB,CAAC;AAAER,MAAAA,SAAF;AAAaS,MAAAA;AAAb,KAAD,KAA4B;AAC1B,WAAKT,SAAL,KAAmBA,SAAnB,IAAgCI,QAAQ,CAACK,OAAD,CAAxC;AACD,KAJoB,CAAvB;AAMD;AAED;AACF;AACA;;;AACEJ,EAAAA,UAAU,GAAS;AAAA;;AACjB,kCAAKC,eAAL,gFAAsBI,MAAtB;AACA,SAAKJ,eAAL,GAAuBK,SAAvB;AACD;AAED;AACF;AACA;AACA;;;AACED,EAAAA,MAAM,GAAkB;AACtB,SAAKL,UAAL;AACA,WAAOZ,MAAM,CAACmB,aAAP,CAAqB,KAAKZ,SAA1B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEa,EAAAA,WAAW,CAACJ,OAAD,EAAuD;AAChE,WAAOhB,MAAM,CAACoB,WAAP,CACL,KAAKb,SADA,EAEL,OAAOS,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCK,IAAI,CAACC,SAAL,CAAeN,OAAf,CAFnC,CAAP;AAID;;AA/E8B","sourcesContent":["import {\n  EventSubscription,\n  NativeEventEmitter,\n  NativeModules,\n} from 'react-native'\nimport CastSession from './CastSession'\n\nconst { RNGCCastSession: Native } = NativeModules\nconst EventEmitter = new NativeEventEmitter(Native)\n\n/**\n * A channel for sending custom messages between this sender and the Cast receiver. Use when you've built a custom receiver and want to communicate with it.\n *\n * @see [Custom Channels](../../guides/custom-channels)\n *\n * @example\n * ```js\n * import { CastChannel } from 'react-native-google-cast'\n *\n * const channel = await castSession.addChannel('urn:x-cast:com.example.custom')\n *\n * channel.sendMessage('...')\n * ```\n */\nexport default class CastChannel {\n  public castSession: CastSession\n  private messageListener: EventSubscription | undefined\n\n  /** A custom channel identifier starting with `urn:x-cast:`. */\n  namespace: string\n\n  private constructor(\n    castSession: CastSession,\n    namespace: string,\n    onMessage?: (message: Record<string, any> | string) => void\n  ) {\n    this.castSession = castSession\n    this.namespace = namespace\n\n    if (onMessage) {\n      this.onMessage(onMessage)\n    }\n  }\n\n  /**\n   * Add a custom channel to a connected session. This method is equivalent to {@link CastSession#addChannel}.\n   *\n   * @param castSession connected session\n   * @param namespace A custom channel identifier starting with `urn:x-cast:`, for example `urn:x-cast:com.reactnative.googlecast.example`. The namespace name is arbitrary; just make sure it's unique.\n   * @param onMessage function to be invoked when we receive a message from the connected Cast receiver.\n   */\n  public static async add(\n    castSession: CastSession,\n    namespace: string,\n    onMessage?: (message: Record<string, any> | string) => void\n  ): Promise<CastChannel> {\n    await Native.addChannel(namespace)\n\n    return new CastChannel(castSession, namespace, onMessage)\n  }\n\n  /**\n   * Register a message listener. If one already exists, it will be replaced.\n   *\n   * @param listener function to be invoked when we receive a message from the connected Cast receiver.\n   */\n  onMessage(listener: (message: Record<string, any> | string) => void) {\n    this.offMessage()\n    this.messageListener = EventEmitter.addListener(\n      Native.CHANNEL_MESSAGE_RECEIVED,\n      ({ namespace, message }) => {\n        this.namespace === namespace && listener(message)\n      }\n    )\n  }\n\n  /**\n   * Unregister a message listener.\n   */\n  offMessage(): void {\n    this.messageListener?.remove()\n    this.messageListener = undefined\n  }\n\n  /**\n   * Remove the channel when it's no longer needed.\n   * By calling this method, the underlying channel will be destroyed.\n   */\n  remove(): Promise<void> {\n    this.offMessage()\n    return Native.removeChannel(this.namespace)\n  }\n\n  /**\n   * Send a message to the connected Cast receiver using this channel. Note that by default you need to send the message as a JSON object, unless you've initialized the namespace on the receiver to be of the string type.\n   *\n   * To listen for responses, register an {#onMessage} listener.\n   */\n  sendMessage(message: Record<string, any> | string): Promise<void> {\n    return Native.sendMessage(\n      this.namespace,\n      typeof message === 'string' ? message : JSON.stringify(message)\n    )\n  }\n}\n"]}