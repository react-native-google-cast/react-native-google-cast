{"version":3,"sources":["useCastChannel.ts"],"names":["useCastChannel","namespace","onMessage","castChannel","setCastChannel","castSession","channel","CastChannel","add","then","c","remove","offMessage"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,cAAT,CACbC,SADa,EAEbC,SAFa,EAGO;AACpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC,qBAA6B,IAA7B,CAAtC;AACA,QAAMC,WAAW,GAAG,8BAApB;AAEA,wBAAU,MAAM;AACd,QAAIC,OAAJ;;AAEA,QAAID,WAAJ,EAAiB;AACfE,2BAAYC,GAAZ,CAAgBH,WAAhB,EAA6BJ,SAA7B,EAAwCQ,IAAxC,CAA8CC,CAAD,IAAO;AAClDJ,QAAAA,OAAO,GAAGI,CAAV;AACAN,QAAAA,cAAc,CAACM,CAAD,CAAd;AACD,OAHD;AAID,KALD,MAKO;AACLJ,MAAAA,OAAO,GAAG,IAAV;AACAF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAED,WAAO,MAAM;AAAA;;AACX,kBAAAE,OAAO,UAAP,4CAASK,MAAT;AACD,KAFD;AAGD,GAhBD,EAgBG,CAACN,WAAD,EAAcJ,SAAd,CAhBH;AAkBA,wBAAU,MAAM;AACd,QAAI,CAACC,SAAL,EAAgB,OADF,CACS;;AAEvBC,IAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAED,SAAb,CAAuBA,SAAvB;AAEA,WAAO,MAAM;AACXC,MAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAES,UAAb;AACD,KAFD;AAGD,GARD,EAQG,CAACT,WAAD,EAAcD,SAAd,CARH;AAUA,SAAOC,WAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\nimport CastChannel from './CastChannel'\nimport useCastSession from './useCastSession'\n\n/**\n * Hook that establishes a custom {@link CastChannel} on the current connected session.\n *\n * @param namespace custom namespace starting with `urn:x-cast:`\n * @param onMessage listener called when a message from the receiver was received\n * @returns custom channel, or `null` if there's no session connected\n * @example\n * ```js\n * import { useCastChannel } from 'react-native-google-cast'\n *\n * function MyComponent() {\n *   const castChannel = useCastChannel(\n *     'urn:x-cast:com.example.custom',\n *     useCallback(message => { console.log('Received message', message) }, [])\n *   )\n *\n *   // later, for example after pressing a button\n *   function onPress() {\n *     if (castChannel) {\n *       castChannel.sendMessage('...')\n *     }\n *   }\n * }\n * ```\n */\nexport default function useCastChannel(\n  namespace: string,\n  onMessage?: (message: Record<string, any> | string) => void\n): CastChannel | null {\n  const [castChannel, setCastChannel] = useState<CastChannel | null>(null)\n  const castSession = useCastSession()\n\n  useEffect(() => {\n    let channel: CastChannel | null\n\n    if (castSession) {\n      CastChannel.add(castSession, namespace).then((c) => {\n        channel = c\n        setCastChannel(c)\n      })\n    } else {\n      channel = null\n      setCastChannel(null)\n    }\n\n    return () => {\n      channel?.remove()\n    }\n  }, [castSession, namespace])\n\n  useEffect(() => {\n    if (!onMessage) return // don't call offMessage when removing the effect\n\n    castChannel?.onMessage(onMessage)\n\n    return () => {\n      castChannel?.offMessage()\n    }\n  }, [castChannel, onMessage])\n\n  return castChannel\n}\n"]}