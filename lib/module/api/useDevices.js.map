{"version":3,"sources":["useDevices.ts"],"names":["useEffect","useState","CastContext","useDevices","discoveryManager","getDiscoveryManager","devices","setDevices","getDevices","then","listener","onDevicesUpdated","remove"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,GAAgC;AAC7C,QAAMC,gBAAgB,GAAGF,WAAW,CAACG,mBAAZ,EAAzB;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAW,EAAX,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,gBAAgB,CAACI,UAAjB,GAA8BC,IAA9B,CAAmCF,UAAnC;AAEA,UAAMG,QAAQ,GAAGN,gBAAgB,CAACO,gBAAjB,CAAkCJ,UAAlC,CAAjB;AAEA,WAAO,MAAM;AACXG,MAAAA,QAAQ,CAACE,MAAT;AACD,KAFD;AAGD,GARQ,EAQN,CAACR,gBAAD,CARM,CAAT;AAUA,SAAOE,OAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\nimport Device from '../types/Device'\nimport CastContext from './CastContext'\n\n/**\n * Hook that listens to changes to available devices and returns current list.\n */\nexport default function useDevices(): Device[] {\n  const discoveryManager = CastContext.getDiscoveryManager()\n\n  const [devices, setDevices] = useState<Device[]>([])\n\n  useEffect(() => {\n    discoveryManager.getDevices().then(setDevices)\n\n    const listener = discoveryManager.onDevicesUpdated(setDevices)\n\n    return () => {\n      listener.remove()\n    }\n  }, [discoveryManager])\n\n  return devices\n}\n"]}